// Generated by gencpp from file bluedragon_netcomm/netcomm.msg
// DO NOT EDIT!


#ifndef BLUEDRAGON_NETCOMM_MESSAGE_NETCOMM_H
#define BLUEDRAGON_NETCOMM_MESSAGE_NETCOMM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/Range.h>
#include <sensor_msgs/LaserScan.h>
#include <nav_msgs/Odometry.h>
#include <bluedragon_propulsion/near_objects.h>
#include <bluedragon_propulsion/propulsion.h>
#include <tf/tfMessage.h>

namespace bluedragon_netcomm
{
template <class ContainerAllocator>
struct netcomm_
{
  typedef netcomm_<ContainerAllocator> Type;

  netcomm_()
    : header()
    , range()
    , scan()
    , odom_combined()
    , near_objects()
    , propulsion()
    , tf()  {
    }
  netcomm_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , range(_alloc)
    , scan(_alloc)
    , odom_combined(_alloc)
    , near_objects(_alloc)
    , propulsion(_alloc)
    , tf(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::sensor_msgs::Range_<ContainerAllocator>  _range_type;
  _range_type range;

   typedef  ::sensor_msgs::LaserScan_<ContainerAllocator>  _scan_type;
  _scan_type scan;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _odom_combined_type;
  _odom_combined_type odom_combined;

   typedef  ::bluedragon_propulsion::near_objects_<ContainerAllocator>  _near_objects_type;
  _near_objects_type near_objects;

   typedef  ::bluedragon_propulsion::propulsion_<ContainerAllocator>  _propulsion_type;
  _propulsion_type propulsion;

   typedef  ::tf::tfMessage_<ContainerAllocator>  _tf_type;
  _tf_type tf;




  typedef boost::shared_ptr< ::bluedragon_netcomm::netcomm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bluedragon_netcomm::netcomm_<ContainerAllocator> const> ConstPtr;

}; // struct netcomm_

typedef ::bluedragon_netcomm::netcomm_<std::allocator<void> > netcomm;

typedef boost::shared_ptr< ::bluedragon_netcomm::netcomm > netcommPtr;
typedef boost::shared_ptr< ::bluedragon_netcomm::netcomm const> netcommConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bluedragon_netcomm::netcomm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bluedragon_netcomm::netcomm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bluedragon_netcomm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'roscpp': ['/home/tim/catkin_ws/src/ros_comm/clients/roscpp/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'bluedragon_netcomm': ['/home/tim/catkin_ws/src/bluedragon_netcomm/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'tf': ['/opt/ros/kinetic/share/tf/cmake/../msg'], 'bluedragon_propulsion': ['/home/tim/catkin_ws/src/bluedragon_propulsion/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bluedragon_netcomm::netcomm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bluedragon_netcomm::netcomm_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluedragon_netcomm::netcomm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluedragon_netcomm::netcomm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluedragon_netcomm::netcomm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluedragon_netcomm::netcomm_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bluedragon_netcomm::netcomm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4aa8528078c27f768d1fea1a3464ded3";
  }

  static const char* value(const ::bluedragon_netcomm::netcomm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4aa8528078c27f76ULL;
  static const uint64_t static_value2 = 0x8d1fea1a3464ded3ULL;
};

template<class ContainerAllocator>
struct DataType< ::bluedragon_netcomm::netcomm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bluedragon_netcomm/netcomm";
  }

  static const char* value(const ::bluedragon_netcomm::netcomm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bluedragon_netcomm::netcomm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
sensor_msgs/Range range\n\
sensor_msgs/LaserScan scan\n\
nav_msgs/Odometry odom_combined\n\
bluedragon_propulsion/near_objects near_objects\n\
bluedragon_propulsion/propulsion propulsion\n\
tf/tfMessage tf\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Range\n\
# Single range reading from an active ranger that emits energy and reports\n\
# one range reading that is valid along an arc at the distance measured. \n\
# This message is  not appropriate for laser scanners. See the LaserScan\n\
# message if you are working with a laser scanner.\n\
\n\
# This message also can represent a fixed-distance (binary) ranger.  This\n\
# sensor will have min_range===max_range===distance of detection.\n\
# These sensors follow REP 117 and will output -Inf if the object is detected\n\
# and +Inf if the object is outside of the detection range.\n\
\n\
Header header           # timestamp in the header is the time the ranger\n\
                        # returned the distance reading\n\
\n\
# Radiation type enums\n\
# If you want a value added to this list, send an email to the ros-users list\n\
uint8 ULTRASOUND=0\n\
uint8 INFRARED=1\n\
\n\
uint8 radiation_type    # the type of radiation used by the sensor\n\
                        # (sound, IR, etc) [enum]\n\
\n\
float32 field_of_view   # the size of the arc that the distance reading is\n\
                        # valid for [rad]\n\
                        # the object causing the range reading may have\n\
                        # been anywhere within -field_of_view/2 and\n\
                        # field_of_view/2 at the measured range. \n\
                        # 0 angle corresponds to the x-axis of the sensor.\n\
\n\
float32 min_range       # minimum range value [m]\n\
float32 max_range       # maximum range value [m]\n\
                        # Fixed distance rangers require min_range==max_range\n\
\n\
float32 range           # range data [m]\n\
                        # (Note: values < range_min or > range_max\n\
                        # should be discarded)\n\
                        # Fixed distance rangers only output -Inf or +Inf.\n\
                        # -Inf represents a detection within fixed distance.\n\
                        # (Detection too close to the sensor to quantify)\n\
                        # +Inf represents no detection within the fixed distance.\n\
                        # (Object out of range)\n\
================================================================================\n\
MSG: sensor_msgs/LaserScan\n\
# Single scan from a planar laser range-finder\n\
#\n\
# If you have another ranging device with different behavior (e.g. a sonar\n\
# array), please find or create a different message, since applications\n\
# will make fairly laser-specific assumptions about this data\n\
\n\
Header header            # timestamp in the header is the acquisition time of \n\
                         # the first ray in the scan.\n\
                         #\n\
                         # in frame frame_id, angles are measured around \n\
                         # the positive Z axis (counterclockwise, if Z is up)\n\
                         # with zero angle being forward along the x axis\n\
                         \n\
float32 angle_min        # start angle of the scan [rad]\n\
float32 angle_max        # end angle of the scan [rad]\n\
float32 angle_increment  # angular distance between measurements [rad]\n\
\n\
float32 time_increment   # time between measurements [seconds] - if your scanner\n\
                         # is moving, this will be used in interpolating position\n\
                         # of 3d points\n\
float32 scan_time        # time between scans [seconds]\n\
\n\
float32 range_min        # minimum range value [m]\n\
float32 range_max        # maximum range value [m]\n\
\n\
float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)\n\
float32[] intensities    # intensity data [device-specific units].  If your\n\
                         # device does not provide intensities, please leave\n\
                         # the array empty.\n\
\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertainty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: bluedragon_propulsion/near_objects\n\
Header header\n\
\n\
float64[] X_objects \n\
float64[] Y_objects\n\
float64[] radians\n\
float64[] radius\n\
bool[] green_bouy\n\
bool[] red_bouy\n\
int64[] zone\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: bluedragon_propulsion/propulsion\n\
Header header\n\
\n\
int64 left_throttle\n\
int64 right_throttle\n\
\n\
================================================================================\n\
MSG: tf/tfMessage\n\
geometry_msgs/TransformStamped[] transforms\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TransformStamped\n\
# This expresses a transform from coordinate frame header.frame_id\n\
# to the coordinate frame child_frame_id\n\
#\n\
# This message is mostly used by the \n\
# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n\
# See its documentation for more information.\n\
\n\
Header header\n\
string child_frame_id # the frame id of the child frame\n\
Transform transform\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
";
  }

  static const char* value(const ::bluedragon_netcomm::netcomm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bluedragon_netcomm::netcomm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.range);
      stream.next(m.scan);
      stream.next(m.odom_combined);
      stream.next(m.near_objects);
      stream.next(m.propulsion);
      stream.next(m.tf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct netcomm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bluedragon_netcomm::netcomm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bluedragon_netcomm::netcomm_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "range: ";
    s << std::endl;
    Printer< ::sensor_msgs::Range_<ContainerAllocator> >::stream(s, indent + "  ", v.range);
    s << indent << "scan: ";
    s << std::endl;
    Printer< ::sensor_msgs::LaserScan_<ContainerAllocator> >::stream(s, indent + "  ", v.scan);
    s << indent << "odom_combined: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.odom_combined);
    s << indent << "near_objects: ";
    s << std::endl;
    Printer< ::bluedragon_propulsion::near_objects_<ContainerAllocator> >::stream(s, indent + "  ", v.near_objects);
    s << indent << "propulsion: ";
    s << std::endl;
    Printer< ::bluedragon_propulsion::propulsion_<ContainerAllocator> >::stream(s, indent + "  ", v.propulsion);
    s << indent << "tf: ";
    s << std::endl;
    Printer< ::tf::tfMessage_<ContainerAllocator> >::stream(s, indent + "  ", v.tf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLUEDRAGON_NETCOMM_MESSAGE_NETCOMM_H
