// Generated by gencpp from file bluedragon_propulsion/near_objects.msg
// DO NOT EDIT!


#ifndef BLUEDRAGON_PROPULSION_MESSAGE_NEAR_OBJECTS_H
#define BLUEDRAGON_PROPULSION_MESSAGE_NEAR_OBJECTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace bluedragon_propulsion
{
template <class ContainerAllocator>
struct near_objects_
{
  typedef near_objects_<ContainerAllocator> Type;

  near_objects_()
    : header()
    , X_objects()
    , Y_objects()
    , radians()
    , radius()
    , green_bouy()
    , red_bouy()
    , zone()  {
    }
  near_objects_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , X_objects(_alloc)
    , Y_objects(_alloc)
    , radians(_alloc)
    , radius(_alloc)
    , green_bouy(_alloc)
    , red_bouy(_alloc)
    , zone(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _X_objects_type;
  _X_objects_type X_objects;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Y_objects_type;
  _Y_objects_type Y_objects;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _radians_type;
  _radians_type radians;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _radius_type;
  _radius_type radius;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _green_bouy_type;
  _green_bouy_type green_bouy;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _red_bouy_type;
  _red_bouy_type red_bouy;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _zone_type;
  _zone_type zone;




  typedef boost::shared_ptr< ::bluedragon_propulsion::near_objects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bluedragon_propulsion::near_objects_<ContainerAllocator> const> ConstPtr;

}; // struct near_objects_

typedef ::bluedragon_propulsion::near_objects_<std::allocator<void> > near_objects;

typedef boost::shared_ptr< ::bluedragon_propulsion::near_objects > near_objectsPtr;
typedef boost::shared_ptr< ::bluedragon_propulsion::near_objects const> near_objectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bluedragon_propulsion::near_objects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bluedragon_propulsion::near_objects_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bluedragon_propulsion

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp': ['/home/tim/catkin_ws/src/ros_comm/clients/roscpp/msg'], 'bluedragon_propulsion': ['/home/tim/catkin_ws/src/bluedragon_propulsion/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bluedragon_propulsion::near_objects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bluedragon_propulsion::near_objects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluedragon_propulsion::near_objects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluedragon_propulsion::near_objects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluedragon_propulsion::near_objects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluedragon_propulsion::near_objects_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bluedragon_propulsion::near_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "082e7af6d2a808fec3817c0e5bab0b7d";
  }

  static const char* value(const ::bluedragon_propulsion::near_objects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x082e7af6d2a808feULL;
  static const uint64_t static_value2 = 0xc3817c0e5bab0b7dULL;
};

template<class ContainerAllocator>
struct DataType< ::bluedragon_propulsion::near_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bluedragon_propulsion/near_objects";
  }

  static const char* value(const ::bluedragon_propulsion::near_objects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bluedragon_propulsion::near_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float64[] X_objects \n\
float64[] Y_objects\n\
float64[] radians\n\
float64[] radius\n\
bool[] green_bouy\n\
bool[] red_bouy\n\
int64[] zone\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::bluedragon_propulsion::near_objects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bluedragon_propulsion::near_objects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.X_objects);
      stream.next(m.Y_objects);
      stream.next(m.radians);
      stream.next(m.radius);
      stream.next(m.green_bouy);
      stream.next(m.red_bouy);
      stream.next(m.zone);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct near_objects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bluedragon_propulsion::near_objects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bluedragon_propulsion::near_objects_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "X_objects[]" << std::endl;
    for (size_t i = 0; i < v.X_objects.size(); ++i)
    {
      s << indent << "  X_objects[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.X_objects[i]);
    }
    s << indent << "Y_objects[]" << std::endl;
    for (size_t i = 0; i < v.Y_objects.size(); ++i)
    {
      s << indent << "  Y_objects[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Y_objects[i]);
    }
    s << indent << "radians[]" << std::endl;
    for (size_t i = 0; i < v.radians.size(); ++i)
    {
      s << indent << "  radians[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.radians[i]);
    }
    s << indent << "radius[]" << std::endl;
    for (size_t i = 0; i < v.radius.size(); ++i)
    {
      s << indent << "  radius[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.radius[i]);
    }
    s << indent << "green_bouy[]" << std::endl;
    for (size_t i = 0; i < v.green_bouy.size(); ++i)
    {
      s << indent << "  green_bouy[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.green_bouy[i]);
    }
    s << indent << "red_bouy[]" << std::endl;
    for (size_t i = 0; i < v.red_bouy.size(); ++i)
    {
      s << indent << "  red_bouy[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.red_bouy[i]);
    }
    s << indent << "zone[]" << std::endl;
    for (size_t i = 0; i < v.zone.size(); ++i)
    {
      s << indent << "  zone[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.zone[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLUEDRAGON_PROPULSION_MESSAGE_NEAR_OBJECTS_H
