// Generated by gencpp from file bluedragon_propulsion/near_objects_Y.msg
// DO NOT EDIT!


#ifndef BLUEDRAGON_PROPULSION_MESSAGE_NEAR_OBJECTS_Y_H
#define BLUEDRAGON_PROPULSION_MESSAGE_NEAR_OBJECTS_Y_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bluedragon_propulsion
{
template <class ContainerAllocator>
struct near_objects_Y_
{
  typedef near_objects_Y_<ContainerAllocator> Type;

  near_objects_Y_()
    : Y_objects()  {
    }
  near_objects_Y_(const ContainerAllocator& _alloc)
    : Y_objects(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Y_objects_type;
  _Y_objects_type Y_objects;




  typedef boost::shared_ptr< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> const> ConstPtr;

}; // struct near_objects_Y_

typedef ::bluedragon_propulsion::near_objects_Y_<std::allocator<void> > near_objects_Y;

typedef boost::shared_ptr< ::bluedragon_propulsion::near_objects_Y > near_objects_YPtr;
typedef boost::shared_ptr< ::bluedragon_propulsion::near_objects_Y const> near_objects_YConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bluedragon_propulsion

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg'], 'bluedragon_propulsion': ['/home/tim/catkin_ws/src/bluedragon_propulsion/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ebdc4270ce0a25ba89d453ef40152f9";
  }

  static const char* value(const ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ebdc4270ce0a25bULL;
  static const uint64_t static_value2 = 0xa89d453ef40152f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bluedragon_propulsion/near_objects_Y";
  }

  static const char* value(const ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] Y_objects \n\
";
  }

  static const char* value(const ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Y_objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct near_objects_Y_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bluedragon_propulsion::near_objects_Y_<ContainerAllocator>& v)
  {
    s << indent << "Y_objects[]" << std::endl;
    for (size_t i = 0; i < v.Y_objects.size(); ++i)
    {
      s << indent << "  Y_objects[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Y_objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLUEDRAGON_PROPULSION_MESSAGE_NEAR_OBJECTS_Y_H
