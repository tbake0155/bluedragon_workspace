// Generated by gencpp from file ublox_msgs/MonVER.msg
// DO NOT EDIT!


#ifndef UBLOX_MSGS_MESSAGE_MONVER_H
#define UBLOX_MSGS_MESSAGE_MONVER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ublox_msgs
{
template <class ContainerAllocator>
struct MonVER_
{
  typedef MonVER_<ContainerAllocator> Type;

  MonVER_()
    : swVersion()
    , hwVersion()  {
      swVersion.assign(0);

      hwVersion.assign(0);
  }
  MonVER_(const ContainerAllocator& _alloc)
    : swVersion()
    , hwVersion()  {
  (void)_alloc;
      swVersion.assign(0);

      hwVersion.assign(0);
  }



   typedef boost::array<uint8_t, 30>  _swVersion_type;
  _swVersion_type swVersion;

   typedef boost::array<uint8_t, 10>  _hwVersion_type;
  _hwVersion_type hwVersion;


    enum { CLASS_ID = 10u };
     enum { MESSAGE_ID = 4u };
 

  typedef boost::shared_ptr< ::ublox_msgs::MonVER_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::MonVER_<ContainerAllocator> const> ConstPtr;

}; // struct MonVER_

typedef ::ublox_msgs::MonVER_<std::allocator<void> > MonVER;

typedef boost::shared_ptr< ::ublox_msgs::MonVER > MonVERPtr;
typedef boost::shared_ptr< ::ublox_msgs::MonVER const> MonVERConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msgs::MonVER_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msgs::MonVER_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ublox_msgs': ['/home/tim/catkin_ws/src/ublox/ublox_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::MonVER_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::MonVER_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::MonVER_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::MonVER_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::MonVER_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::MonVER_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::MonVER_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89732a19b51c49be31e36fb80481a8d4";
  }

  static const char* value(const ::ublox_msgs::MonVER_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89732a19b51c49beULL;
  static const uint64_t static_value2 = 0x31e36fb80481a8d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::MonVER_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msgs/MonVER";
  }

  static const char* value(const ::ublox_msgs::MonVER_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::MonVER_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MON-VER (0xB5 0x62)\n\
# Receiver/Software Version\n\
# Returned when the version is polled.\n\
\n\
uint8 CLASS_ID = 10\n\
uint8 MESSAGE_ID = 4\n\
\n\
char[30] swVersion    # Zero-terminated software version string.\n\
char[10] hwVersion    # Zero-terminated hardware version string.\n\
\n\
# TODO: Implement support for dynamic char[] array in serializer.\n\
";
  }

  static const char* value(const ::ublox_msgs::MonVER_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msgs::MonVER_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.swVersion);
      stream.next(m.hwVersion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MonVER_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::MonVER_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msgs::MonVER_<ContainerAllocator>& v)
  {
    s << indent << "swVersion[]" << std::endl;
    for (size_t i = 0; i < v.swVersion.size(); ++i)
    {
      s << indent << "  swVersion[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.swVersion[i]);
    }
    s << indent << "hwVersion[]" << std::endl;
    for (size_t i = 0; i < v.hwVersion.size(); ++i)
    {
      s << indent << "  hwVersion[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.hwVersion[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_MONVER_H
