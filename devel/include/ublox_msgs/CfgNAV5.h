// Generated by gencpp from file ublox_msgs/CfgNAV5.msg
// DO NOT EDIT!


#ifndef UBLOX_MSGS_MESSAGE_CFGNAV5_H
#define UBLOX_MSGS_MESSAGE_CFGNAV5_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ublox_msgs
{
template <class ContainerAllocator>
struct CfgNAV5_
{
  typedef CfgNAV5_<ContainerAllocator> Type;

  CfgNAV5_()
    : mask(0)
    , dynModel(0)
    , fixMode(0)
    , fixedAlt(0)
    , fixedAltVar(0)
    , minElev(0)
    , drLimit(0)
    , pDop(0)
    , tDop(0)
    , pAcc(0)
    , tAcc(0)
    , staticHoldThresh(0)
    , dgpsTimeOut(0)
    , reserved2(0)
    , reserved3(0)
    , reserved4(0)  {
    }
  CfgNAV5_(const ContainerAllocator& _alloc)
    : mask(0)
    , dynModel(0)
    , fixMode(0)
    , fixedAlt(0)
    , fixedAltVar(0)
    , minElev(0)
    , drLimit(0)
    , pDop(0)
    , tDop(0)
    , pAcc(0)
    , tAcc(0)
    , staticHoldThresh(0)
    , dgpsTimeOut(0)
    , reserved2(0)
    , reserved3(0)
    , reserved4(0)  {
  (void)_alloc;
    }



   typedef uint16_t _mask_type;
  _mask_type mask;

   typedef uint8_t _dynModel_type;
  _dynModel_type dynModel;

   typedef uint8_t _fixMode_type;
  _fixMode_type fixMode;

   typedef int32_t _fixedAlt_type;
  _fixedAlt_type fixedAlt;

   typedef uint32_t _fixedAltVar_type;
  _fixedAltVar_type fixedAltVar;

   typedef int8_t _minElev_type;
  _minElev_type minElev;

   typedef uint8_t _drLimit_type;
  _drLimit_type drLimit;

   typedef uint16_t _pDop_type;
  _pDop_type pDop;

   typedef uint16_t _tDop_type;
  _tDop_type tDop;

   typedef uint16_t _pAcc_type;
  _pAcc_type pAcc;

   typedef uint16_t _tAcc_type;
  _tAcc_type tAcc;

   typedef uint8_t _staticHoldThresh_type;
  _staticHoldThresh_type staticHoldThresh;

   typedef uint8_t _dgpsTimeOut_type;
  _dgpsTimeOut_type dgpsTimeOut;

   typedef uint32_t _reserved2_type;
  _reserved2_type reserved2;

   typedef uint32_t _reserved3_type;
  _reserved3_type reserved3;

   typedef uint32_t _reserved4_type;
  _reserved4_type reserved4;


    enum { CLASS_ID = 6u };
     enum { MESSAGE_ID = 36u };
     enum { MASK_DYN = 1u };
     enum { MASK_MIN_EL = 2u };
     enum { MASK_FIX_MODE = 4u };
     enum { MASK_DR_LIM = 8u };
     enum { MASK_POS_MASK = 16u };
     enum { MASK_TIME_MASK = 32u };
     enum { MASK_STATIC_HOLD_MASK = 64u };
     enum { MASK_DGPS_MASK = 128u };
     enum { DYN_MODEL_PORTABLE = 0u };
     enum { DYN_MODEL_STATIONARY = 2u };
     enum { DYN_MODEL_PEDESTRIAN = 3u };
     enum { DYN_MODEL_AUTOMOTIVE = 4u };
     enum { DYN_MODEL_SEA = 5u };
     enum { DYN_MODEL_AIRBORNE_1G = 6u };
     enum { DYN_MODEL_AIRBORNE_2G = 7u };
     enum { DYN_MODEL_AIRBORNE_4G = 8u };
     enum { FIX_MODE_2D_ONLY = 1u };
     enum { FIX_MODE_3D_ONLY = 2u };
     enum { FIX_MODE_AUTO = 3u };
 

  typedef boost::shared_ptr< ::ublox_msgs::CfgNAV5_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::CfgNAV5_<ContainerAllocator> const> ConstPtr;

}; // struct CfgNAV5_

typedef ::ublox_msgs::CfgNAV5_<std::allocator<void> > CfgNAV5;

typedef boost::shared_ptr< ::ublox_msgs::CfgNAV5 > CfgNAV5Ptr;
typedef boost::shared_ptr< ::ublox_msgs::CfgNAV5 const> CfgNAV5ConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msgs::CfgNAV5_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msgs::CfgNAV5_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ublox_msgs': ['/home/tim/catkin_ws/src/ublox/ublox_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::CfgNAV5_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::CfgNAV5_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::CfgNAV5_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::CfgNAV5_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::CfgNAV5_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::CfgNAV5_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::CfgNAV5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c6e2419d1dd6532b8f09e39a02e167c";
  }

  static const char* value(const ::ublox_msgs::CfgNAV5_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c6e2419d1dd6532ULL;
  static const uint64_t static_value2 = 0xb8f09e39a02e167cULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::CfgNAV5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msgs/CfgNAV5";
  }

  static const char* value(const ::ublox_msgs::CfgNAV5_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::CfgNAV5_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# CFG-NAV5 (0x06 0x24)\n\
# Navigation Engine Settings\n\
#\n\
\n\
uint8 CLASS_ID = 6\n\
uint8 MESSAGE_ID = 36\n\
\n\
uint16 mask             # Parameters Bitmask. Only the masked\n\
                        # parameters will be applied.\n\
uint16 MASK_DYN = 1                 # Apply dynamic model settings\n\
uint16 MASK_MIN_EL = 2              # Apply minimum elevation settings\n\
uint16 MASK_FIX_MODE = 4            # Apply fix mode settings\n\
uint16 MASK_DR_LIM = 8              # Apply DR limit settings\n\
uint16 MASK_POS_MASK = 16           # Apply position mask settings\n\
uint16 MASK_TIME_MASK = 32          # Apply time mask settings\n\
uint16 MASK_STATIC_HOLD_MASK = 64   # Apply static hold settings\n\
uint16 MASK_DGPS_MASK = 128         # Apply DGPS settings, firmware 7 and newer only\n\
\n\
uint8 dynModel          # Dynamic Platform model:\n\
uint8 DYN_MODEL_PORTABLE = 0        # Portable\n\
uint8 DYN_MODEL_STATIONARY = 2      # Stationary\n\
uint8 DYN_MODEL_PEDESTRIAN = 3      # Pedestrian\n\
uint8 DYN_MODEL_AUTOMOTIVE = 4      # Automotive\n\
uint8 DYN_MODEL_SEA = 5             # Sea\n\
uint8 DYN_MODEL_AIRBORNE_1G = 6     # Airborne with <1g Acceleration\n\
uint8 DYN_MODEL_AIRBORNE_2G = 7     # Airborne with <2g Acceleration\n\
uint8 DYN_MODEL_AIRBORNE_4G = 8     # Airborne with <4g Acceleration\n\
\n\
uint8 fixMode           # Position Fixing Mode.\n\
uint8 FIX_MODE_2D_ONLY = 1          # 2D only\n\
uint8 FIX_MODE_3D_ONLY = 2          # 3D only\n\
uint8 FIX_MODE_AUTO = 3             # Auto 2D/3D\n\
\n\
int32 fixedAlt          # Fixed altitude (mean sea level) for 2D fix mode. [m / 0.01]\n\
uint32 fixedAltVar      # Fixed altitude variance for 2D mode. [m^2 / 0.0001]\n\
int8 minElev            # Minimum Elevation for a GNSS satellite to be used in NAV [deg]\n\
uint8 drLimit           # Maximum time to perform dead reckoning [s]\n\
                        # (linear extrapolation) in case of GPS signal loss\n\
uint16 pDop             # Position DOP Mask to use [1 / 0.1]\n\
uint16 tDop             # Time DOP Mask to use [1 / 0.1]\n\
uint16 pAcc             # Position Accuracy Mask [m]\n\
uint16 tAcc             # Time Accuracy Mask [m]\n\
uint8 staticHoldThresh  # Static hold threshold [cm/s]\n\
uint8 dgpsTimeOut       # DGPS timeout, firmware 7 and newer only [s]\n\
uint32 reserved2        # Always set to zero\n\
uint32 reserved3        # Always set to zero\n\
uint32 reserved4        # Always set to zero\n\
";
  }

  static const char* value(const ::ublox_msgs::CfgNAV5_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msgs::CfgNAV5_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mask);
      stream.next(m.dynModel);
      stream.next(m.fixMode);
      stream.next(m.fixedAlt);
      stream.next(m.fixedAltVar);
      stream.next(m.minElev);
      stream.next(m.drLimit);
      stream.next(m.pDop);
      stream.next(m.tDop);
      stream.next(m.pAcc);
      stream.next(m.tAcc);
      stream.next(m.staticHoldThresh);
      stream.next(m.dgpsTimeOut);
      stream.next(m.reserved2);
      stream.next(m.reserved3);
      stream.next(m.reserved4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct CfgNAV5_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::CfgNAV5_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msgs::CfgNAV5_<ContainerAllocator>& v)
  {
    s << indent << "mask: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mask);
    s << indent << "dynModel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dynModel);
    s << indent << "fixMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fixMode);
    s << indent << "fixedAlt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fixedAlt);
    s << indent << "fixedAltVar: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fixedAltVar);
    s << indent << "minElev: ";
    Printer<int8_t>::stream(s, indent + "  ", v.minElev);
    s << indent << "drLimit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drLimit);
    s << indent << "pDop: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pDop);
    s << indent << "tDop: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tDop);
    s << indent << "pAcc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pAcc);
    s << indent << "tAcc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tAcc);
    s << indent << "staticHoldThresh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.staticHoldThresh);
    s << indent << "dgpsTimeOut: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dgpsTimeOut);
    s << indent << "reserved2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved2);
    s << indent << "reserved3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved3);
    s << indent << "reserved4: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_CFGNAV5_H
