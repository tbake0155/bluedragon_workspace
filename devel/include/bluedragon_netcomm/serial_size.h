// Generated by gencpp from file bluedragon_netcomm/serial_size.msg
// DO NOT EDIT!


#ifndef BLUEDRAGON_NETCOMM_MESSAGE_SERIAL_SIZE_H
#define BLUEDRAGON_NETCOMM_MESSAGE_SERIAL_SIZE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bluedragon_netcomm
{
template <class ContainerAllocator>
struct serial_size_
{
  typedef serial_size_<ContainerAllocator> Type;

  serial_size_()
    : pr_serial_size(0)
    , no_serial_size(0)
    , ls_serial_size(0)
    , tf_serial_size(0)
    , ra_serial_size(0)
    , od_serial_size(0)
    , ma_serial_size(0)  {
    }
  serial_size_(const ContainerAllocator& _alloc)
    : pr_serial_size(0)
    , no_serial_size(0)
    , ls_serial_size(0)
    , tf_serial_size(0)
    , ra_serial_size(0)
    , od_serial_size(0)
    , ma_serial_size(0)  {
  (void)_alloc;
    }



   typedef int32_t _pr_serial_size_type;
  _pr_serial_size_type pr_serial_size;

   typedef int32_t _no_serial_size_type;
  _no_serial_size_type no_serial_size;

   typedef int32_t _ls_serial_size_type;
  _ls_serial_size_type ls_serial_size;

   typedef int32_t _tf_serial_size_type;
  _tf_serial_size_type tf_serial_size;

   typedef int32_t _ra_serial_size_type;
  _ra_serial_size_type ra_serial_size;

   typedef int32_t _od_serial_size_type;
  _od_serial_size_type od_serial_size;

   typedef int32_t _ma_serial_size_type;
  _ma_serial_size_type ma_serial_size;




  typedef boost::shared_ptr< ::bluedragon_netcomm::serial_size_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bluedragon_netcomm::serial_size_<ContainerAllocator> const> ConstPtr;

}; // struct serial_size_

typedef ::bluedragon_netcomm::serial_size_<std::allocator<void> > serial_size;

typedef boost::shared_ptr< ::bluedragon_netcomm::serial_size > serial_sizePtr;
typedef boost::shared_ptr< ::bluedragon_netcomm::serial_size const> serial_sizeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bluedragon_netcomm::serial_size_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bluedragon_netcomm::serial_size_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bluedragon_netcomm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'roscpp': ['/home/tim/catkin_ws/src/ros_comm/clients/roscpp/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'bluedragon_netcomm': ['/home/tim/catkin_ws/src/bluedragon_netcomm/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'tf': ['/opt/ros/kinetic/share/tf/cmake/../msg'], 'bluedragon_propulsion': ['/home/tim/catkin_ws/src/bluedragon_propulsion/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bluedragon_netcomm::serial_size_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bluedragon_netcomm::serial_size_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluedragon_netcomm::serial_size_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluedragon_netcomm::serial_size_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluedragon_netcomm::serial_size_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluedragon_netcomm::serial_size_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bluedragon_netcomm::serial_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ae69dddfb963b4406ee9199a82f29d0";
  }

  static const char* value(const ::bluedragon_netcomm::serial_size_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ae69dddfb963b44ULL;
  static const uint64_t static_value2 = 0x06ee9199a82f29d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::bluedragon_netcomm::serial_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bluedragon_netcomm/serial_size";
  }

  static const char* value(const ::bluedragon_netcomm::serial_size_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bluedragon_netcomm::serial_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
int32 pr_serial_size\n\
int32 no_serial_size\n\
int32 ls_serial_size\n\
int32 tf_serial_size\n\
int32 ra_serial_size\n\
int32 od_serial_size\n\
int32 ma_serial_size\n\
";
  }

  static const char* value(const ::bluedragon_netcomm::serial_size_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bluedragon_netcomm::serial_size_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pr_serial_size);
      stream.next(m.no_serial_size);
      stream.next(m.ls_serial_size);
      stream.next(m.tf_serial_size);
      stream.next(m.ra_serial_size);
      stream.next(m.od_serial_size);
      stream.next(m.ma_serial_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct serial_size_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bluedragon_netcomm::serial_size_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bluedragon_netcomm::serial_size_<ContainerAllocator>& v)
  {
    s << indent << "pr_serial_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pr_serial_size);
    s << indent << "no_serial_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.no_serial_size);
    s << indent << "ls_serial_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ls_serial_size);
    s << indent << "tf_serial_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tf_serial_size);
    s << indent << "ra_serial_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ra_serial_size);
    s << indent << "od_serial_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.od_serial_size);
    s << indent << "ma_serial_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ma_serial_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLUEDRAGON_NETCOMM_MESSAGE_SERIAL_SIZE_H
