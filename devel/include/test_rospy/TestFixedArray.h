// Generated by gencpp from file test_rospy/TestFixedArray.msg
// DO NOT EDIT!


#ifndef TEST_ROSPY_MESSAGE_TESTFIXEDARRAY_H
#define TEST_ROSPY_MESSAGE_TESTFIXEDARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test_rospy
{
template <class ContainerAllocator>
struct TestFixedArray_
{
  typedef TestFixedArray_<ContainerAllocator> Type;

  TestFixedArray_()
    : f32_1()
    , f32_3()
    , f64_1()
    , f64_3()
    , i8_1()
    , i8_3()
    , u8_1()
    , u8_3()
    , i32_1()
    , i32_3()
    , u32_1()
    , u32_3()
    , s_1()
    , s_3()
    , b_1()
    , b_3()  {
      f32_1.assign(0.0);

      f32_3.assign(0.0);

      f64_1.assign(0.0);

      f64_3.assign(0.0);

      i8_1.assign(0);

      i8_3.assign(0);

      u8_1.assign(0);

      u8_3.assign(0);

      i32_1.assign(0);

      i32_3.assign(0);

      u32_1.assign(0);

      u32_3.assign(0);

      b_1.assign(false);

      b_3.assign(false);
  }
  TestFixedArray_(const ContainerAllocator& _alloc)
    : f32_1()
    , f32_3()
    , f64_1()
    , f64_3()
    , i8_1()
    , i8_3()
    , u8_1()
    , u8_3()
    , i32_1()
    , i32_3()
    , u32_1()
    , u32_3()
    , s_1()
    , s_3()
    , b_1()
    , b_3()  {
      f32_1.assign(0.0);

      f32_3.assign(0.0);

      f64_1.assign(0.0);

      f64_3.assign(0.0);

      i8_1.assign(0);

      i8_3.assign(0);

      u8_1.assign(0);

      u8_3.assign(0);

      i32_1.assign(0);

      i32_3.assign(0);

      u32_1.assign(0);

      u32_3.assign(0);

      s_1.assign(std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > (_alloc));

      s_3.assign(std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > (_alloc));

      b_1.assign(false);

      b_3.assign(false);
  }



   typedef boost::array<float, 1>  _f32_1_type;
  _f32_1_type f32_1;

   typedef boost::array<float, 3>  _f32_3_type;
  _f32_3_type f32_3;

   typedef boost::array<double, 1>  _f64_1_type;
  _f64_1_type f64_1;

   typedef boost::array<double, 3>  _f64_3_type;
  _f64_3_type f64_3;

   typedef boost::array<int8_t, 1>  _i8_1_type;
  _i8_1_type i8_1;

   typedef boost::array<int8_t, 3>  _i8_3_type;
  _i8_3_type i8_3;

   typedef boost::array<uint8_t, 1>  _u8_1_type;
  _u8_1_type u8_1;

   typedef boost::array<uint8_t, 3>  _u8_3_type;
  _u8_3_type u8_3;

   typedef boost::array<int32_t, 1>  _i32_1_type;
  _i32_1_type i32_1;

   typedef boost::array<int32_t, 3>  _i32_3_type;
  _i32_3_type i32_3;

   typedef boost::array<uint32_t, 1>  _u32_1_type;
  _u32_1_type u32_1;

   typedef boost::array<uint32_t, 3>  _u32_3_type;
  _u32_3_type u32_3;

   typedef boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 1>  _s_1_type;
  _s_1_type s_1;

   typedef boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 3>  _s_3_type;
  _s_3_type s_3;

   typedef boost::array<uint8_t, 1>  _b_1_type;
  _b_1_type b_1;

   typedef boost::array<uint8_t, 3>  _b_3_type;
  _b_3_type b_3;




  typedef boost::shared_ptr< ::test_rospy::TestFixedArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_rospy::TestFixedArray_<ContainerAllocator> const> ConstPtr;

}; // struct TestFixedArray_

typedef ::test_rospy::TestFixedArray_<std::allocator<void> > TestFixedArray;

typedef boost::shared_ptr< ::test_rospy::TestFixedArray > TestFixedArrayPtr;
typedef boost::shared_ptr< ::test_rospy::TestFixedArray const> TestFixedArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_rospy::TestFixedArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_rospy::TestFixedArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace test_rospy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'test_rospy': ['/home/tim/catkin_ws/src/ros_comm/test/test_rospy/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'test_rosmaster': ['/home/tim/catkin_ws/src/ros_comm/test/test_rosmaster/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::test_rospy::TestFixedArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_rospy::TestFixedArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_rospy::TestFixedArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_rospy::TestFixedArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_rospy::TestFixedArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_rospy::TestFixedArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_rospy::TestFixedArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1557473dc09f1a01a00123a713c822a7";
  }

  static const char* value(const ::test_rospy::TestFixedArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1557473dc09f1a01ULL;
  static const uint64_t static_value2 = 0xa00123a713c822a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_rospy::TestFixedArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_rospy/TestFixedArray";
  }

  static const char* value(const ::test_rospy::TestFixedArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_rospy::TestFixedArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[1] f32_1\n\
float32[3] f32_3\n\
float64[1] f64_1\n\
float64[3] f64_3\n\
int8[1] i8_1\n\
int8[3] i8_3\n\
uint8[1] u8_1\n\
uint8[3] u8_3\n\
int32[1] i32_1\n\
int32[3] i32_3\n\
uint32[1] u32_1\n\
uint32[3] u32_3\n\
string[1] s_1\n\
string[3] s_3\n\
bool[1] b_1\n\
bool[3] b_3\n\
";
  }

  static const char* value(const ::test_rospy::TestFixedArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_rospy::TestFixedArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.f32_1);
      stream.next(m.f32_3);
      stream.next(m.f64_1);
      stream.next(m.f64_3);
      stream.next(m.i8_1);
      stream.next(m.i8_3);
      stream.next(m.u8_1);
      stream.next(m.u8_3);
      stream.next(m.i32_1);
      stream.next(m.i32_3);
      stream.next(m.u32_1);
      stream.next(m.u32_3);
      stream.next(m.s_1);
      stream.next(m.s_3);
      stream.next(m.b_1);
      stream.next(m.b_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct TestFixedArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_rospy::TestFixedArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_rospy::TestFixedArray_<ContainerAllocator>& v)
  {
    s << indent << "f32_1[]" << std::endl;
    for (size_t i = 0; i < v.f32_1.size(); ++i)
    {
      s << indent << "  f32_1[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.f32_1[i]);
    }
    s << indent << "f32_3[]" << std::endl;
    for (size_t i = 0; i < v.f32_3.size(); ++i)
    {
      s << indent << "  f32_3[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.f32_3[i]);
    }
    s << indent << "f64_1[]" << std::endl;
    for (size_t i = 0; i < v.f64_1.size(); ++i)
    {
      s << indent << "  f64_1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.f64_1[i]);
    }
    s << indent << "f64_3[]" << std::endl;
    for (size_t i = 0; i < v.f64_3.size(); ++i)
    {
      s << indent << "  f64_3[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.f64_3[i]);
    }
    s << indent << "i8_1[]" << std::endl;
    for (size_t i = 0; i < v.i8_1.size(); ++i)
    {
      s << indent << "  i8_1[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.i8_1[i]);
    }
    s << indent << "i8_3[]" << std::endl;
    for (size_t i = 0; i < v.i8_3.size(); ++i)
    {
      s << indent << "  i8_3[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.i8_3[i]);
    }
    s << indent << "u8_1[]" << std::endl;
    for (size_t i = 0; i < v.u8_1.size(); ++i)
    {
      s << indent << "  u8_1[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.u8_1[i]);
    }
    s << indent << "u8_3[]" << std::endl;
    for (size_t i = 0; i < v.u8_3.size(); ++i)
    {
      s << indent << "  u8_3[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.u8_3[i]);
    }
    s << indent << "i32_1[]" << std::endl;
    for (size_t i = 0; i < v.i32_1.size(); ++i)
    {
      s << indent << "  i32_1[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.i32_1[i]);
    }
    s << indent << "i32_3[]" << std::endl;
    for (size_t i = 0; i < v.i32_3.size(); ++i)
    {
      s << indent << "  i32_3[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.i32_3[i]);
    }
    s << indent << "u32_1[]" << std::endl;
    for (size_t i = 0; i < v.u32_1.size(); ++i)
    {
      s << indent << "  u32_1[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.u32_1[i]);
    }
    s << indent << "u32_3[]" << std::endl;
    for (size_t i = 0; i < v.u32_3.size(); ++i)
    {
      s << indent << "  u32_3[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.u32_3[i]);
    }
    s << indent << "s_1[]" << std::endl;
    for (size_t i = 0; i < v.s_1.size(); ++i)
    {
      s << indent << "  s_1[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.s_1[i]);
    }
    s << indent << "s_3[]" << std::endl;
    for (size_t i = 0; i < v.s_3.size(); ++i)
    {
      s << indent << "  s_3[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.s_3[i]);
    }
    s << indent << "b_1[]" << std::endl;
    for (size_t i = 0; i < v.b_1.size(); ++i)
    {
      s << indent << "  b_1[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.b_1[i]);
    }
    s << indent << "b_3[]" << std::endl;
    for (size_t i = 0; i < v.b_3.size(); ++i)
    {
      s << indent << "  b_3[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.b_3[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_ROSPY_MESSAGE_TESTFIXEDARRAY_H
