// Generated by gencpp from file test_roslib_comm/FillEmbedTime.msg
// DO NOT EDIT!


#ifndef TEST_ROSLIB_COMM_MESSAGE_FILLEMBEDTIME_H
#define TEST_ROSLIB_COMM_MESSAGE_FILLEMBEDTIME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace test_roslib_comm
{
template <class ContainerAllocator>
struct FillEmbedTime_
{
  typedef FillEmbedTime_<ContainerAllocator> Type;

  FillEmbedTime_()
    : t()
    , d()
    , str_msg()
    , str_msg_array()
    , i32(0)  {
    }
  FillEmbedTime_(const ContainerAllocator& _alloc)
    : t()
    , d()
    , str_msg(_alloc)
    , str_msg_array(_alloc)
    , i32(0)  {
  (void)_alloc;
    }



   typedef ros::Time _t_type;
  _t_type t;

   typedef ros::Duration _d_type;
  _d_type d;

   typedef  ::std_msgs::String_<ContainerAllocator>  _str_msg_type;
  _str_msg_type str_msg;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _str_msg_array_type;
  _str_msg_array_type str_msg_array;

   typedef int32_t _i32_type;
  _i32_type i32;




  typedef boost::shared_ptr< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> const> ConstPtr;

}; // struct FillEmbedTime_

typedef ::test_roslib_comm::FillEmbedTime_<std::allocator<void> > FillEmbedTime;

typedef boost::shared_ptr< ::test_roslib_comm::FillEmbedTime > FillEmbedTimePtr;
typedef boost::shared_ptr< ::test_roslib_comm::FillEmbedTime const> FillEmbedTimeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace test_roslib_comm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rosgraph_msgs': ['/opt/ros/kinetic/share/rosgraph_msgs/cmake/../msg'], 'test_roslib_comm': ['/home/tim/catkin_ws/src/ros_comm/test/test_roslib_comm/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90e08039be001a899b8c20e680c289b0";
  }

  static const char* value(const ::test_roslib_comm::FillEmbedTime_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90e08039be001a89ULL;
  static const uint64_t static_value2 = 0x9b8c20e680c289b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test_roslib_comm/FillEmbedTime";
  }

  static const char* value(const ::test_roslib_comm::FillEmbedTime_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time t\n\
duration d\n\
std_msgs/String str_msg\n\
std_msgs/String[] str_msg_array\n\
int32 i32\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
";
  }

  static const char* value(const ::test_roslib_comm::FillEmbedTime_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t);
      stream.next(m.d);
      stream.next(m.str_msg);
      stream.next(m.str_msg_array);
      stream.next(m.i32);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FillEmbedTime_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test_roslib_comm::FillEmbedTime_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test_roslib_comm::FillEmbedTime_<ContainerAllocator>& v)
  {
    s << indent << "t: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t);
    s << indent << "d: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.d);
    s << indent << "str_msg: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.str_msg);
    s << indent << "str_msg_array[]" << std::endl;
    for (size_t i = 0; i < v.str_msg_array.size(); ++i)
    {
      s << indent << "  str_msg_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.str_msg_array[i]);
    }
    s << indent << "i32: ";
    Printer<int32_t>::stream(s, indent + "  ", v.i32);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_ROSLIB_COMM_MESSAGE_FILLEMBEDTIME_H
