# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from test_roslib_comm/FillEmbedTime.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class FillEmbedTime(genpy.Message):
  _md5sum = "90e08039be001a899b8c20e680c289b0"
  _type = "test_roslib_comm/FillEmbedTime"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time t
duration d
std_msgs/String str_msg
std_msgs/String[] str_msg_array
int32 i32
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['t','d','str_msg','str_msg_array','i32']
  _slot_types = ['time','duration','std_msgs/String','std_msgs/String[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       t,d,str_msg,str_msg_array,i32

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FillEmbedTime, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.t is None:
        self.t = genpy.Time()
      if self.d is None:
        self.d = genpy.Duration()
      if self.str_msg is None:
        self.str_msg = std_msgs.msg.String()
      if self.str_msg_array is None:
        self.str_msg_array = []
      if self.i32 is None:
        self.i32 = 0
    else:
      self.t = genpy.Time()
      self.d = genpy.Duration()
      self.str_msg = std_msgs.msg.String()
      self.str_msg_array = []
      self.i32 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i().pack(_x.t.secs, _x.t.nsecs, _x.d.secs, _x.d.nsecs))
      _x = self.str_msg.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.str_msg_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.str_msg_array:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.i32))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.t is None:
        self.t = genpy.Time()
      if self.d is None:
        self.d = genpy.Duration()
      if self.str_msg is None:
        self.str_msg = std_msgs.msg.String()
      if self.str_msg_array is None:
        self.str_msg_array = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.t.secs, _x.t.nsecs, _x.d.secs, _x.d.nsecs,) = _get_struct_2I2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.str_msg.data = str[start:end].decode('utf-8')
      else:
        self.str_msg.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.str_msg_array = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.str_msg_array.append(val1)
      start = end
      end += 4
      (self.i32,) = _get_struct_i().unpack(str[start:end])
      self.t.canon()
      self.d.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i().pack(_x.t.secs, _x.t.nsecs, _x.d.secs, _x.d.nsecs))
      _x = self.str_msg.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.str_msg_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.str_msg_array:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.i32))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.t is None:
        self.t = genpy.Time()
      if self.d is None:
        self.d = genpy.Duration()
      if self.str_msg is None:
        self.str_msg = std_msgs.msg.String()
      if self.str_msg_array is None:
        self.str_msg_array = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.t.secs, _x.t.nsecs, _x.d.secs, _x.d.nsecs,) = _get_struct_2I2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.str_msg.data = str[start:end].decode('utf-8')
      else:
        self.str_msg.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.str_msg_array = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.str_msg_array.append(val1)
      start = end
      end += 4
      (self.i32,) = _get_struct_i().unpack(str[start:end])
      self.t.canon()
      self.d.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2i = None
def _get_struct_2I2i():
    global _struct_2I2i
    if _struct_2I2i is None:
        _struct_2I2i = struct.Struct("<2I2i")
    return _struct_2I2i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
