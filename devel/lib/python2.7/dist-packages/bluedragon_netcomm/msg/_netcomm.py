# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bluedragon_netcomm/netcomm.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nav_msgs.msg
import geometry_msgs.msg
import tf.msg
import sensor_msgs.msg
import bluedragon_propulsion.msg
import std_msgs.msg

class netcomm(genpy.Message):
  _md5sum = "4aa8528078c27f768d1fea1a3464ded3"
  _type = "bluedragon_netcomm/netcomm"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

sensor_msgs/Range range
sensor_msgs/LaserScan scan
nav_msgs/Odometry odom_combined
bluedragon_propulsion/near_objects near_objects
bluedragon_propulsion/propulsion propulsion
tf/tfMessage tf



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/Range
# Single range reading from an active ranger that emits energy and reports
# one range reading that is valid along an arc at the distance measured. 
# This message is  not appropriate for laser scanners. See the LaserScan
# message if you are working with a laser scanner.

# This message also can represent a fixed-distance (binary) ranger.  This
# sensor will have min_range===max_range===distance of detection.
# These sensors follow REP 117 and will output -Inf if the object is detected
# and +Inf if the object is outside of the detection range.

Header header           # timestamp in the header is the time the ranger
                        # returned the distance reading

# Radiation type enums
# If you want a value added to this list, send an email to the ros-users list
uint8 ULTRASOUND=0
uint8 INFRARED=1

uint8 radiation_type    # the type of radiation used by the sensor
                        # (sound, IR, etc) [enum]

float32 field_of_view   # the size of the arc that the distance reading is
                        # valid for [rad]
                        # the object causing the range reading may have
                        # been anywhere within -field_of_view/2 and
                        # field_of_view/2 at the measured range. 
                        # 0 angle corresponds to the x-axis of the sensor.

float32 min_range       # minimum range value [m]
float32 max_range       # maximum range value [m]
                        # Fixed distance rangers require min_range==max_range

float32 range           # range data [m]
                        # (Note: values < range_min or > range_max
                        # should be discarded)
                        # Fixed distance rangers only output -Inf or +Inf.
                        # -Inf represents a detection within fixed distance.
                        # (Detection too close to the sensor to quantify)
                        # +Inf represents no detection within the fixed distance.
                        # (Object out of range)
================================================================================
MSG: sensor_msgs/LaserScan
# Single scan from a planar laser range-finder
#
# If you have another ranging device with different behavior (e.g. a sonar
# array), please find or create a different message, since applications
# will make fairly laser-specific assumptions about this data

Header header            # timestamp in the header is the acquisition time of 
                         # the first ray in the scan.
                         #
                         # in frame frame_id, angles are measured around 
                         # the positive Z axis (counterclockwise, if Z is up)
                         # with zero angle being forward along the x axis
                         
float32 angle_min        # start angle of the scan [rad]
float32 angle_max        # end angle of the scan [rad]
float32 angle_increment  # angular distance between measurements [rad]

float32 time_increment   # time between measurements [seconds] - if your scanner
                         # is moving, this will be used in interpolating position
                         # of 3d points
float32 scan_time        # time between scans [seconds]

float32 range_min        # minimum range value [m]
float32 range_max        # maximum range value [m]

float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)
float32[] intensities    # intensity data [device-specific units].  If your
                         # device does not provide intensities, please leave
                         # the array empty.

================================================================================
MSG: nav_msgs/Odometry
# This represents an estimate of a position and velocity in free space.  
# The pose in this message should be specified in the coordinate frame given by header.frame_id.
# The twist in this message should be specified in the coordinate frame given by the child_frame_id
Header header
string child_frame_id
geometry_msgs/PoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: bluedragon_propulsion/near_objects
Header header

float64[] X_objects 
float64[] Y_objects
float64[] radians
float64[] radius
bool[] green_bouy
bool[] red_bouy
int64[] zone




================================================================================
MSG: bluedragon_propulsion/propulsion
Header header

int64 left_throttle
int64 right_throttle

================================================================================
MSG: tf/tfMessage
geometry_msgs/TransformStamped[] transforms

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation
"""
  __slots__ = ['header','range','scan','odom_combined','near_objects','propulsion','tf']
  _slot_types = ['std_msgs/Header','sensor_msgs/Range','sensor_msgs/LaserScan','nav_msgs/Odometry','bluedragon_propulsion/near_objects','bluedragon_propulsion/propulsion','tf/tfMessage']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,range,scan,odom_combined,near_objects,propulsion,tf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(netcomm, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.range is None:
        self.range = sensor_msgs.msg.Range()
      if self.scan is None:
        self.scan = sensor_msgs.msg.LaserScan()
      if self.odom_combined is None:
        self.odom_combined = nav_msgs.msg.Odometry()
      if self.near_objects is None:
        self.near_objects = bluedragon_propulsion.msg.near_objects()
      if self.propulsion is None:
        self.propulsion = bluedragon_propulsion.msg.propulsion()
      if self.tf is None:
        self.tf = tf.msg.tfMessage()
    else:
      self.header = std_msgs.msg.Header()
      self.range = sensor_msgs.msg.Range()
      self.scan = sensor_msgs.msg.LaserScan()
      self.odom_combined = nav_msgs.msg.Odometry()
      self.near_objects = bluedragon_propulsion.msg.near_objects()
      self.propulsion = bluedragon_propulsion.msg.propulsion()
      self.tf = tf.msg.tfMessage()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.range.header.seq, _x.range.header.stamp.secs, _x.range.header.stamp.nsecs))
      _x = self.range.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B4f3I().pack(_x.range.radiation_type, _x.range.field_of_view, _x.range.min_range, _x.range.max_range, _x.range.range, _x.scan.header.seq, _x.scan.header.stamp.secs, _x.scan.header.stamp.nsecs))
      _x = self.scan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.scan.angle_min, _x.scan.angle_max, _x.scan.angle_increment, _x.scan.time_increment, _x.scan.scan_time, _x.scan.range_min, _x.scan.range_max))
      length = len(self.scan.ranges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.scan.ranges))
      length = len(self.scan.intensities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.scan.intensities))
      _x = self
      buff.write(_get_struct_3I().pack(_x.odom_combined.header.seq, _x.odom_combined.header.stamp.secs, _x.odom_combined.header.stamp.nsecs))
      _x = self.odom_combined.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.odom_combined.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.odom_combined.pose.pose.position.x, _x.odom_combined.pose.pose.position.y, _x.odom_combined.pose.pose.position.z, _x.odom_combined.pose.pose.orientation.x, _x.odom_combined.pose.pose.orientation.y, _x.odom_combined.pose.pose.orientation.z, _x.odom_combined.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.odom_combined.pose.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.odom_combined.twist.twist.linear.x, _x.odom_combined.twist.twist.linear.y, _x.odom_combined.twist.twist.linear.z, _x.odom_combined.twist.twist.angular.x, _x.odom_combined.twist.twist.angular.y, _x.odom_combined.twist.twist.angular.z))
      buff.write(_get_struct_36d().pack(*self.odom_combined.twist.covariance))
      _x = self
      buff.write(_get_struct_3I().pack(_x.near_objects.header.seq, _x.near_objects.header.stamp.secs, _x.near_objects.header.stamp.nsecs))
      _x = self.near_objects.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.near_objects.X_objects)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.near_objects.X_objects))
      length = len(self.near_objects.Y_objects)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.near_objects.Y_objects))
      length = len(self.near_objects.radians)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.near_objects.radians))
      length = len(self.near_objects.radius)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.near_objects.radius))
      length = len(self.near_objects.green_bouy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.near_objects.green_bouy))
      length = len(self.near_objects.red_bouy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.near_objects.red_bouy))
      length = len(self.near_objects.zone)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.near_objects.zone))
      _x = self
      buff.write(_get_struct_3I().pack(_x.propulsion.header.seq, _x.propulsion.header.stamp.secs, _x.propulsion.header.stamp.nsecs))
      _x = self.propulsion.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2q().pack(_x.propulsion.left_throttle, _x.propulsion.right_throttle))
      length = len(self.tf.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.tf.transforms:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.transform
        _v4 = _v3.translation
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = _v3.rotation
        _x = _v5
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.range is None:
        self.range = sensor_msgs.msg.Range()
      if self.scan is None:
        self.scan = sensor_msgs.msg.LaserScan()
      if self.odom_combined is None:
        self.odom_combined = nav_msgs.msg.Odometry()
      if self.near_objects is None:
        self.near_objects = bluedragon_propulsion.msg.near_objects()
      if self.propulsion is None:
        self.propulsion = bluedragon_propulsion.msg.propulsion()
      if self.tf is None:
        self.tf = tf.msg.tfMessage()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.range.header.seq, _x.range.header.stamp.secs, _x.range.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.range.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.range.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.range.radiation_type, _x.range.field_of_view, _x.range.min_range, _x.range.max_range, _x.range.range, _x.scan.header.seq, _x.scan.header.stamp.secs, _x.scan.header.stamp.nsecs,) = _get_struct_B4f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.scan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.scan.angle_min, _x.scan.angle_max, _x.scan.angle_increment, _x.scan.time_increment, _x.scan.scan_time, _x.scan.range_min, _x.scan.range_max,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.scan.ranges = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.scan.intensities = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.odom_combined.header.seq, _x.odom_combined.header.stamp.secs, _x.odom_combined.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odom_combined.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.odom_combined.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odom_combined.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.odom_combined.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odom_combined.pose.pose.position.x, _x.odom_combined.pose.pose.position.y, _x.odom_combined.pose.pose.position.z, _x.odom_combined.pose.pose.orientation.x, _x.odom_combined.pose.pose.orientation.y, _x.odom_combined.pose.pose.orientation.z, _x.odom_combined.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.odom_combined.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.odom_combined.twist.twist.linear.x, _x.odom_combined.twist.twist.linear.y, _x.odom_combined.twist.twist.linear.z, _x.odom_combined.twist.twist.angular.x, _x.odom_combined.twist.twist.angular.y, _x.odom_combined.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.odom_combined.twist.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.near_objects.header.seq, _x.near_objects.header.stamp.secs, _x.near_objects.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.near_objects.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.near_objects.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.X_objects = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.Y_objects = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.radians = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.radius = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.green_bouy = struct.unpack(pattern, str[start:end])
      self.near_objects.green_bouy = map(bool, self.near_objects.green_bouy)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.red_bouy = struct.unpack(pattern, str[start:end])
      self.near_objects.red_bouy = map(bool, self.near_objects.red_bouy)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.zone = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.propulsion.header.seq, _x.propulsion.header.stamp.secs, _x.propulsion.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.propulsion.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.propulsion.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.propulsion.left_throttle, _x.propulsion.right_throttle,) = _get_struct_2q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tf.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v6 = val1.header
        start = end
        end += 4
        (_v6.seq,) = _get_struct_I().unpack(str[start:end])
        _v7 = _v6.stamp
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v6.frame_id = str[start:end].decode('utf-8')
        else:
          _v6.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v8 = val1.transform
        _v9 = _v8.translation
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v10 = _v8.rotation
        _x = _v10
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.tf.transforms.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.range.header.seq, _x.range.header.stamp.secs, _x.range.header.stamp.nsecs))
      _x = self.range.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B4f3I().pack(_x.range.radiation_type, _x.range.field_of_view, _x.range.min_range, _x.range.max_range, _x.range.range, _x.scan.header.seq, _x.scan.header.stamp.secs, _x.scan.header.stamp.nsecs))
      _x = self.scan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.scan.angle_min, _x.scan.angle_max, _x.scan.angle_increment, _x.scan.time_increment, _x.scan.scan_time, _x.scan.range_min, _x.scan.range_max))
      length = len(self.scan.ranges)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.scan.ranges.tostring())
      length = len(self.scan.intensities)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.scan.intensities.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.odom_combined.header.seq, _x.odom_combined.header.stamp.secs, _x.odom_combined.header.stamp.nsecs))
      _x = self.odom_combined.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.odom_combined.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.odom_combined.pose.pose.position.x, _x.odom_combined.pose.pose.position.y, _x.odom_combined.pose.pose.position.z, _x.odom_combined.pose.pose.orientation.x, _x.odom_combined.pose.pose.orientation.y, _x.odom_combined.pose.pose.orientation.z, _x.odom_combined.pose.pose.orientation.w))
      buff.write(self.odom_combined.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.odom_combined.twist.twist.linear.x, _x.odom_combined.twist.twist.linear.y, _x.odom_combined.twist.twist.linear.z, _x.odom_combined.twist.twist.angular.x, _x.odom_combined.twist.twist.angular.y, _x.odom_combined.twist.twist.angular.z))
      buff.write(self.odom_combined.twist.covariance.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.near_objects.header.seq, _x.near_objects.header.stamp.secs, _x.near_objects.header.stamp.nsecs))
      _x = self.near_objects.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.near_objects.X_objects)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.near_objects.X_objects.tostring())
      length = len(self.near_objects.Y_objects)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.near_objects.Y_objects.tostring())
      length = len(self.near_objects.radians)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.near_objects.radians.tostring())
      length = len(self.near_objects.radius)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.near_objects.radius.tostring())
      length = len(self.near_objects.green_bouy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.near_objects.green_bouy.tostring())
      length = len(self.near_objects.red_bouy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.near_objects.red_bouy.tostring())
      length = len(self.near_objects.zone)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.near_objects.zone.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.propulsion.header.seq, _x.propulsion.header.stamp.secs, _x.propulsion.header.stamp.nsecs))
      _x = self.propulsion.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2q().pack(_x.propulsion.left_throttle, _x.propulsion.right_throttle))
      length = len(self.tf.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.tf.transforms:
        _v11 = val1.header
        buff.write(_get_struct_I().pack(_v11.seq))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v13 = val1.transform
        _v14 = _v13.translation
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.rotation
        _x = _v15
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.range is None:
        self.range = sensor_msgs.msg.Range()
      if self.scan is None:
        self.scan = sensor_msgs.msg.LaserScan()
      if self.odom_combined is None:
        self.odom_combined = nav_msgs.msg.Odometry()
      if self.near_objects is None:
        self.near_objects = bluedragon_propulsion.msg.near_objects()
      if self.propulsion is None:
        self.propulsion = bluedragon_propulsion.msg.propulsion()
      if self.tf is None:
        self.tf = tf.msg.tfMessage()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.range.header.seq, _x.range.header.stamp.secs, _x.range.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.range.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.range.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.range.radiation_type, _x.range.field_of_view, _x.range.min_range, _x.range.max_range, _x.range.range, _x.scan.header.seq, _x.scan.header.stamp.secs, _x.scan.header.stamp.nsecs,) = _get_struct_B4f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scan.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.scan.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.scan.angle_min, _x.scan.angle_max, _x.scan.angle_increment, _x.scan.time_increment, _x.scan.scan_time, _x.scan.range_min, _x.scan.range_max,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.scan.ranges = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.scan.intensities = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.odom_combined.header.seq, _x.odom_combined.header.stamp.secs, _x.odom_combined.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odom_combined.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.odom_combined.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odom_combined.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.odom_combined.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odom_combined.pose.pose.position.x, _x.odom_combined.pose.pose.position.y, _x.odom_combined.pose.pose.position.z, _x.odom_combined.pose.pose.orientation.x, _x.odom_combined.pose.pose.orientation.y, _x.odom_combined.pose.pose.orientation.z, _x.odom_combined.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.odom_combined.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.odom_combined.twist.twist.linear.x, _x.odom_combined.twist.twist.linear.y, _x.odom_combined.twist.twist.linear.z, _x.odom_combined.twist.twist.angular.x, _x.odom_combined.twist.twist.angular.y, _x.odom_combined.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.odom_combined.twist.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 12
      (_x.near_objects.header.seq, _x.near_objects.header.stamp.secs, _x.near_objects.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.near_objects.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.near_objects.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.X_objects = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.Y_objects = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.radians = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.radius = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.green_bouy = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.near_objects.green_bouy = map(bool, self.near_objects.green_bouy)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.red_bouy = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.near_objects.red_bouy = map(bool, self.near_objects.red_bouy)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.near_objects.zone = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      _x = self
      start = end
      end += 12
      (_x.propulsion.header.seq, _x.propulsion.header.stamp.secs, _x.propulsion.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.propulsion.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.propulsion.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.propulsion.left_throttle, _x.propulsion.right_throttle,) = _get_struct_2q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tf.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v16 = val1.header
        start = end
        end += 4
        (_v16.seq,) = _get_struct_I().unpack(str[start:end])
        _v17 = _v16.stamp
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.frame_id = str[start:end].decode('utf-8')
        else:
          _v16.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v18 = val1.transform
        _v19 = _v18.translation
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v20 = _v18.rotation
        _x = _v20
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.tf.transforms.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_B4f3I = None
def _get_struct_B4f3I():
    global _struct_B4f3I
    if _struct_B4f3I is None:
        _struct_B4f3I = struct.Struct("<B4f3I")
    return _struct_B4f3I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2q = None
def _get_struct_2q():
    global _struct_2q
    if _struct_2q is None:
        _struct_2q = struct.Struct("<2q")
    return _struct_2q
