# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bluedragon_netcomm/serial_size.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class serial_size(genpy.Message):
  _md5sum = "4ae69dddfb963b4406ee9199a82f29d0"
  _type = "bluedragon_netcomm/serial_size"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 pr_serial_size
int32 no_serial_size
int32 ls_serial_size
int32 tf_serial_size
int32 ra_serial_size
int32 od_serial_size
int32 ma_serial_size
"""
  __slots__ = ['pr_serial_size','no_serial_size','ls_serial_size','tf_serial_size','ra_serial_size','od_serial_size','ma_serial_size']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pr_serial_size,no_serial_size,ls_serial_size,tf_serial_size,ra_serial_size,od_serial_size,ma_serial_size

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(serial_size, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pr_serial_size is None:
        self.pr_serial_size = 0
      if self.no_serial_size is None:
        self.no_serial_size = 0
      if self.ls_serial_size is None:
        self.ls_serial_size = 0
      if self.tf_serial_size is None:
        self.tf_serial_size = 0
      if self.ra_serial_size is None:
        self.ra_serial_size = 0
      if self.od_serial_size is None:
        self.od_serial_size = 0
      if self.ma_serial_size is None:
        self.ma_serial_size = 0
    else:
      self.pr_serial_size = 0
      self.no_serial_size = 0
      self.ls_serial_size = 0
      self.tf_serial_size = 0
      self.ra_serial_size = 0
      self.od_serial_size = 0
      self.ma_serial_size = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.pr_serial_size, _x.no_serial_size, _x.ls_serial_size, _x.tf_serial_size, _x.ra_serial_size, _x.od_serial_size, _x.ma_serial_size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.pr_serial_size, _x.no_serial_size, _x.ls_serial_size, _x.tf_serial_size, _x.ra_serial_size, _x.od_serial_size, _x.ma_serial_size,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.pr_serial_size, _x.no_serial_size, _x.ls_serial_size, _x.tf_serial_size, _x.ra_serial_size, _x.od_serial_size, _x.ma_serial_size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.pr_serial_size, _x.no_serial_size, _x.ls_serial_size, _x.tf_serial_size, _x.ra_serial_size, _x.od_serial_size, _x.ma_serial_size,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7i = None
def _get_struct_7i():
    global _struct_7i
    if _struct_7i is None:
        _struct_7i = struct.Struct("<7i")
    return _struct_7i
